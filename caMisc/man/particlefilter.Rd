% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/particlefilter.R
\name{particlefilter}
\alias{particlefilter}
\title{Bootstrap particle filter}
\usage{
particlefilter(N, T, G, M, F = NULL, envir = .GlobalEnv, seed = NULL)
}
\arguments{
\item{N}{Number of particles}

\item{T}{Number of time steps}

\item{G}{Function to simulate hidden states (of dimension p) given previous (See Details)}

\item{M}{Function to calculate log-likelihood of data for a given particle}

\item{F}{Do not use!}

\item{envir}{Environment the functions should be evaluated in (containing data and parameters)}

\item{seed}{Random seed to start the filter}
}
\value{
A list with a p x N x T array X containing the simulated particles (X) and a vector of length T with the negative log-likelihood contribution at each time point.
}
\description{
Function to run a bootstrap particle filter for user defined model.
}
\details{
The G function should be of the form G <- function(t,X) and return a numeric vector
of simulate values from \eqn{X_t | X_{t-1} = X}. For \eqn{t = 1} the function will be called as G(1,NULL).
The M function should be of the form M <- function(t, X) and return the density of the observation at time t given the latent state \eqn{X_t}
}
\examples{
## Univariate example
env <- new.env()
env$pars <- list(sdobs = 0.4, sdstate = 0.3)
local({xx <- cumsum(rnorm(100,0,pars$sdstate))},env)
local({dat <- xx + rnorm(100,0,pars$sdobs)},env)
G <- function(t,X){
            if(t == 1){
               return(rnorm(1,0,pars$sdstate))
            }else{
               return(rnorm(1,X,pars$sdstate))
            }
}
M <- function(t,X){
    return(dnorm(dat[t],X,pars$sdobs, TRUE))
}
pest <- particlefilter(N = 1000, T = 100,
                 G=G,M=M,
                 envir=env, seed=1)
\dontrun{
plot(env$dat)
lines(apply(pest$X[1,,],2,mean),col="red")
lines(apply(pest$X[1,,],2,mean) + 2 * apply(pest$X[1,,],2,sd),col="red",lty=2)
lines(apply(pest$X[1,,],2,mean) - 2 * apply(pest$X[1,,],2,sd),col="red",lty=2)
lines(env$xx)
}

## Bivariate example
env <- new.env()
env$pars <- list(sdobs = 0.4, sdstate = 0.3)
local({xx <- cbind(cumsum(rnorm(100,0,pars$sdstate)),
             cumsum(rnorm(100,0,pars$sdstate)))},env)
local({dat <- xx + matrix(rnorm(2 * 100,0,pars$sdobs),ncol=2)},env)
G <- function(t,X){
            if(t == 1){
               return(rnorm(2,0,pars$sdstate))
            }else{
               return(rnorm(2,X,pars$sdstate))
            }
}
M <- function(t,X){
    return(sum(dnorm(dat[t,],X,pars$sdobs,TRUE)))
}
pest <- particlefilter(N = 1000, T = 100,
                 G=G,M=M,
                 envir=env, seed=1)
\dontrun{
layout(cbind(1,c(2,3)))
plot(env$dat)
lines(env$xx)
lines(apply(pest$X,c(3,1),mean),col="red")
plot(env$dat[,1])
lines(apply(pest$X[1,,],2,mean),col="red")
lines(apply(pest$X[1,,],2,mean) + 2 * apply(pest$X[1,,],2,sd),col="red",lty=2)
lines(apply(pest$X[1,,],2,mean) - 2 * apply(pest$X[1,,],2,sd),col="red",lty=2)
lines(env$xx[,1])
plot(env$dat[,2])
lines(apply(pest$X[2,,],2,mean),col="red")
lines(apply(pest$X[2,,],2,mean) + 2 * apply(pest$X[2,,],2,sd),col="red",lty=2)
lines(apply(pest$X[2,,],2,mean) - 2 * apply(pest$X[2,,],2,sd),col="red",lty=2)
lines(env$xx[,2])
}
}
\author{
Christoffer Moesgaard Albertsen \email{cmoe@aqua.dtu.dk}
}
